###Hangperson Game
- **The Game**
  - [X] The game selects a random word from a word list and makes that the secret word
  - [X] The player guesses one letter at a time, trying to figure out what the word is
  - [X] If the player guesses correctly, any instances of that letter are revealed in the secret word
  - [X] If the player guesses incorrectly, they are penalized by taking away a guess
  - [X] If a player reveals all of the letters of the secret word, they win
  - [X] If a player makes 8 incorrect guesses before solving the secret word, they lose
  - [X] Display current state of the word with non-guessed characters as underscores
  - [X] Multiple guesses must be possible
  - [X] Reset button
  - [ ] Give up button
  - [ ] Make sure single letter input
- **To Do**
  - Plan out your object model. What variables and functions will each object have? How will the different objects communicate with each other?
  - Get the logic to work and make sure you have the game working in the console first **BEFORE** translating it over to update the DOM.
  - Translate your game over so it updates the DOM.
    - Implement a "reset" button that will reset the game and choose a new word
      - Implement a "give up" button that will show the solution
  - Validate the input so that only single letters are accepted as guesses
- **Bonus**
  - Change the input format so that there is no text field. You can get input by "listening" to the keyup event and figuring out which key was pressed.
- **Bonus**
  - Draw the hangperson stick figure using CSS
- **Bonus**
  - Implement a "hint" button that will reveal one of the letters in the word

------

* [X] Show remaining number of guesses
* [X] Show the current word state
* [X] Message with win or lose
* [X] Input field + button (keyup event later)

This last screencast will be silent.
It will simply plug in the logic I put together on an HTML page.
There should be no surprises, since I determined the HTML elements I wanted to use.
I am a little unhappy, because I have a lot of hardcoded selectors, but
you should be able to refactor stuff out even further if you want.
Here is what I will do:
1. Leave this up throughout the screencast so you can read it at your leisure
2. Show bits of code from after the last screencast crashed
3. Create an HTML page and plug in code based on tests
4. Profit

TODO:
1. Handle edge cases (keep guessing after you win/lose)
2. Style it
3. Get a random word from some API somewhere instead
